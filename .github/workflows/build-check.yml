name: Build Check

# This workflow runs on all branches to ensure code builds successfully
# It's optimized for speed and uses extensive caching
on:
  push:
    branches: [ '*' ]  # Run on all branches
  pull_request:
    branches: [ main, dev ]

env:
  BUILD_TYPE: Release
  CACHE_VERSION: v1

jobs:
  # Job 1: Quick build validation (fastest feedback)
  quick-build-check:
    name: Quick Build Validation
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04

    steps:
    # Cache APT packages for faster setup
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-quick-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          apt-quick-${{ runner.os }}-

    - name: Install minimal dependencies
      run: |
        apt-get update -qq
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          git \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          ccache

    - name: Checkout code
      uses: actions/checkout@v4

    # Cache build artifacts aggressively
    - name: Cache quick build
      uses: actions/cache@v4
      with:
        path: |
          build/
          ~/.ccache
        key: quick-build-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          quick-build-${{ runner.os }}-${{ hashFiles('CMakeLists.txt') }}-
          quick-build-${{ runner.os }}-

    - name: Configure and build (quick check)
      run: |
        mkdir -p build
        cd build
        
        # Configure with minimal options for speed
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTS=OFF \
          -DBUILD_DOCS=OFF \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        
        # Build using all available cores
        echo "Building with $(nproc) cores..."
        ccache --zero-stats
        make -j$(nproc)
        ccache --show-stats
        
        # Quick smoke test
        if [ -f ninja_util ]; then
          echo "✅ Binary built successfully"
          ./ninja_util --help > /dev/null 2>&1 || echo "Binary exists but may need runtime dependencies"
        else
          echo "❌ Binary not found"
          exit 1
        fi

  # Job 2: Cross-platform build check (runs in parallel)
  cross-platform-build:
    name: Cross-Platform Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request' || contains(github.ref, 'main') || contains(github.ref, 'dev')
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Cache dependencies per OS
    - name: Cache OS dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/apt
          /var/cache/apt
        key: deps-${{ matrix.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          deps-${{ matrix.os }}-

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          ccache

    # Install Qt6 for supported Ubuntu versions  
    - name: Install Qt6 for ${{ matrix.os }}
      run: |
        # Ubuntu 22.04+ should have Qt6 available
        sudo apt-get install -y qt6-base-dev qt6-connectivity-dev

    # Cache build per OS and architecture
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/
          ~/.ccache
        key: build-${{ matrix.os }}-${{ hashFiles('CMakeLists.txt', 'src/**') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          build-${{ matrix.os }}-

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTS=ON \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      run: |
        cd build
        ccache --zero-stats
        make -j$(nproc)
        ccache --show-stats

    - name: Quick test
      run: |
        cd build
        # Run a quick test if available
        if [ -f test_args ]; then
          echo "Running quick tests..."
          timeout 30s ctest --output-on-failure --parallel $(nproc) || echo "Tests completed with timeout or issues"
        fi

    # Upload artifacts only for successful builds
    - name: Upload build artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ninja_util-${{ matrix.os }}-${{ github.sha }}
        path: build/ninja_util
        retention-days: 7  # Short retention for build checks

  # Job 3: Summary job (depends on all previous jobs)
  build-check-summary:
    name: Build Check Summary
    needs: [quick-build-check, cross-platform-build]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check build results
      run: |
        echo "=== Build Check Summary ==="
        echo "Quick build check: ${{ needs.quick-build-check.result }}"
        echo "Cross-platform build: ${{ needs.cross-platform-build.result }}"
        
        if [ "${{ needs.quick-build-check.result }}" != "success" ]; then
          echo "❌ Quick build check failed"
          exit 1
        fi
        
        if [ "${{ needs.cross-platform-build.result }}" != "success" ] && [ "${{ needs.cross-platform-build.result }}" != "skipped" ]; then
          echo "❌ Cross-platform build failed"
          exit 1
        fi
        
        echo "✅ All build checks passed!"

    - name: Clean up old artifacts
      if: github.event_name == 'push'
      run: |
        echo "Build check completed for ${{ github.ref }}"
        echo "Artifacts will be automatically cleaned up after 7 days"
