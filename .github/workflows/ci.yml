name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, dev, 'feature/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  BUILD_TYPE: Release
  CACHE_VERSION: v2
  DEBIAN_FRONTEND: noninteractive

jobs:
  # Job 1: Quick validation checks (fast feedback)
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.build-needed }}
      has-cpp-files: ${{ steps.files.outputs.cpp-files }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for relevant file changes
      id: changes
      run: |
        # Check if build is needed based on changed files
        if git diff --name-only HEAD~1 HEAD | grep -qE '\.(cpp|hpp|cmake|CMakeLists\.txt|yml|yaml)$'; then
          echo "build-needed=true" >> $GITHUB_OUTPUT
        else
          echo "build-needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Find C++ source files
      id: files
      run: |
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          echo "cpp-files=true" >> $GITHUB_OUTPUT
        else
          echo "cpp-files=false" >> $GITHUB_OUTPUT
        fi

    - name: Install basic tools
      if: steps.files.outputs.cpp-files == 'true'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y file

    - name: Basic file validation
      if: steps.files.outputs.cpp-files == 'true'
      run: |
        echo "üîç Running basic file validation..."
        SOURCES=$(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null)
        
        for file in $SOURCES; do
          # Check file encoding
          if file "$file" | grep -q "UTF-8"; then
            echo "‚úÖ UTF-8 encoding: $file"
          else
            echo "‚ö†Ô∏è  Non-UTF-8 encoding: $file"
          fi
          
          # Check for basic file structure
          if [ -s "$file" ]; then
            echo "‚úÖ Non-empty file: $file"
          else
            echo "‚ùå Empty file: $file"
          fi
        done

  # Job 2: Quality and compliance checks (runs in parallel with build)
  quality-compliance:
    name: Quality & Compliance (${{ matrix.name }})
    needs: quick-checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check-type: [license-spdx, yaml-markdown, cpp-analysis, file-validation, docs-validation]
        include:
          - check-type: license-spdx
            name: "License & SPDX"
            tools: "python3 python3-pip python3-venv licensecheck"
          - check-type: yaml-markdown
            name: "YAML & Markdown"
            tools: "nodejs npm yamllint"
          - check-type: cpp-analysis
            name: "C++ Analysis"
            tools: "clang-format cppcheck clang-tidy build-essential cmake pkg-config libudev-dev libevdev-dev qt6-base-dev qt6-connectivity-dev"
          - check-type: file-validation
            name: "File Validation"
            tools: "file jq"
          - check-type: docs-validation
            name: "Documentation"
            tools: "doxygen graphviz"
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          git \
          curl \
          ca-certificates \
          ${{ matrix.tools }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache packages
      uses: actions/cache@v4
      with:
        path: |
          /tmp/pip-cache
          ~/.npm
        key: quality-${{ matrix.check-type }}-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          quality-${{ matrix.check-type }}-${{ runner.os }}-

    - name: Setup Python environment (if needed)
      if: matrix.check-type == 'license-spdx'
      run: |
        # licensecheck is now installed via apt, so no pip install needed
        echo "Python tools ready via system packages"

    - name: Install Node.js tools
      if: matrix.check-type == 'yaml-markdown'
      run: |
        npm install -g markdownlint-cli2 @mermaid-js/mermaid-cli yaml-lint

    - name: License compliance and SPDX check
      if: matrix.check-type == 'license-spdx'
      run: |
        echo "üîç Checking SPDX identifiers..."
        LICENSE_ERRORS=0
        
        # Check for SPDX identifiers in source files
        echo "Checking SPDX identifiers..."
        MISSING_SPDX=0
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
          if ! grep -q "SPDX-License-Identifier\|SPDX-FileCopyrightText" "$file"; then
            echo "‚ùå Missing SPDX identifier: $file"
            MISSING_SPDX=1
          else
            echo "‚úÖ SPDX identifier found: $file"
          fi
        done
        
        # Check CMakeLists.txt for SPDX
        if [ -f CMakeLists.txt ]; then
          if grep -q "SPDX-License-Identifier\|SPDX-FileCopyrightText" CMakeLists.txt; then
            echo "‚úÖ SPDX identifier found in CMakeLists.txt"
          else
            echo "‚ùå Missing SPDX identifier in CMakeLists.txt"
            MISSING_SPDX=1
          fi
        fi
        
        # Use licensecheck if available
        if command -v licensecheck >/dev/null 2>&1; then
          echo "Running licensecheck on source files..."
          if ! find src tests -name "*.cpp" -o -name "*.hpp" | head -5 | xargs licensecheck 2>/dev/null; then
            echo "‚ùå licensecheck found issues"
            LICENSE_ERRORS=1
          else
            echo "‚úÖ licensecheck passed"
          fi
        fi
        
        if [ $MISSING_SPDX -eq 1 ]; then
          echo "‚ùå SPDX compliance failed - missing identifiers"
          echo "üí° Add SPDX identifiers to source files"
          echo "Example:"
          echo "// SPDX-License-Identifier: Apache-2.0"
          echo "// SPDX-FileCopyrightText: $(date +%Y) Your Name"
          LICENSE_ERRORS=1
        else
          echo "‚úÖ All source files have SPDX identifiers"
        fi
        
        # Fail if license errors found
        if [ $LICENSE_ERRORS -eq 1 ]; then
          echo "‚ùå License compliance validation failed"
          exit 1
        fi

    - name: License file and header validation
      if: matrix.check-type == 'license-spdx'
      run: |
        echo "üîç Comprehensive license validation..."
        LICENSE_HEADER_ERRORS=0
        
        # Check for LICENSE file existence and content
        if [ ! -f LICENSE ]; then
          echo "‚ùå No LICENSE file found at repository root"
          exit 1
        else
          echo "‚úÖ LICENSE file found"
          
          # Check LICENSE file content
          LICENSE_TYPE=""
          if grep -q "Apache License" LICENSE; then
            LICENSE_TYPE="Apache-2.0"
            echo "‚úÖ Apache License 2.0 detected"
          elif grep -q "MIT License" LICENSE; then
            LICENSE_TYPE="MIT"
            echo "‚úÖ MIT License detected"
          elif grep -q "GNU General Public License" LICENSE; then
            LICENSE_TYPE="GPL"
            echo "‚úÖ GPL License detected"
          else
            echo "‚ùå License type not clearly identified"
            LICENSE_HEADER_ERRORS=1
          fi
          
          # Validate LICENSE file is not empty and has reasonable content
          LICENSE_SIZE=$(wc -c < LICENSE)
          if [ "$LICENSE_SIZE" -lt 100 ]; then
            echo "‚ùå LICENSE file seems too short ($LICENSE_SIZE characters)"
            LICENSE_HEADER_ERRORS=1
          else
            echo "‚úÖ LICENSE file has substantial content ($LICENSE_SIZE characters)"
          fi
        fi
        
        # Check if README mentions license
        if [ -f README.md ]; then
          if grep -q -i license README.md; then
            echo "‚úÖ License mentioned in README.md"
          else
            echo "‚ùå License not mentioned in README.md"
            LICENSE_HEADER_ERRORS=1
          fi
        fi
        
        # Check for license headers in source files
        echo "Checking license headers in source files..."
        MISSING_HEADERS=0
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
          if ! head -10 "$file" | grep -q -i "license\|copyright\|spdx"; then
            echo "‚ùå Missing license header: $file"
            MISSING_HEADERS=1
          else
            echo "‚úÖ License header found: $file"
          fi
        done
        
        if [ $MISSING_HEADERS -eq 1 ]; then
          echo "‚ùå License headers validation failed"
          echo "üí° Add license headers to source files"
          echo "Example header:"
          echo "// SPDX-License-Identifier: Apache-2.0"
          echo "// SPDX-FileCopyrightText: $(date +%Y) Your Name"
          echo "//"
          echo "// Licensed under the Apache License, Version 2.0..."
          LICENSE_HEADER_ERRORS=1
        fi
        
        # Fail if license header errors found
        if [ $LICENSE_HEADER_ERRORS -eq 1 ]; then
          echo "‚ùå License validation failed"
          exit 1
        else
          echo "‚úÖ License validation passed"
        fi

    - name: YAML linting
      if: matrix.check-type == 'yaml-markdown'
      run: |
        echo "üîç Linting YAML files..."
        YAML_ERRORS=0
        
        if command -v yamllint >/dev/null 2>&1; then
          if ! yamllint .github/workflows/; then
            echo "‚ùå YAML linting issues found"
            YAML_ERRORS=1
          fi
        else
          echo "‚ÑπÔ∏è  yamllint not available, skipping"
        fi
        
        # Additional YAML validation with yaml-lint
        if command -v yaml-lint >/dev/null 2>&1; then
          find . -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Checking: $file"
            if ! yaml-lint "$file"; then
              echo "‚ùå YAML validation failed for $file"
              echo "YAML_LINT_FAILED=1" >> /tmp/yaml_errors
            fi
          done
          
          # Check for yaml-lint failures
          if [ -f /tmp/yaml_errors ] && grep -q "YAML_LINT_FAILED=1" /tmp/yaml_errors; then
            YAML_ERRORS=1
          fi
        fi
        
        # Fail if YAML errors found
        if [ $YAML_ERRORS -eq 1 ]; then
          echo "‚ùå YAML validation failed"
          exit 1
        else
          echo "‚úÖ YAML validation passed"
        fi

    - name: Markdown linting with markdownlint-cli2
      if: matrix.check-type == 'yaml-markdown'
      run: |
        echo "üîç Linting Markdown files with markdownlint-cli2..."
        MARKDOWN_ERRORS=0
        
        if command -v markdownlint-cli2 >/dev/null 2>&1; then
          # Create markdownlint config if it doesn't exist
          if [ ! -f ".markdownlint.json" ]; then
            echo "Creating default markdownlint configuration..."
            cat > .markdownlint.json << 'EOF'
        {
          "default": true,
          "MD003": { "style": "atx" },
          "MD007": { "indent": 2 },
          "MD013": { "line_length": 120 },
          "MD024": { "allow_different_nesting": true },
          "MD033": false,
          "MD041": false
        }
        EOF
          fi
          
          # Lint all markdown files
          echo "Linting Markdown files..."
          if ! markdownlint-cli2 "**/*.md" --ignore node_modules --ignore build --config .markdownlint.json; then
            echo "‚ùå Markdown linting issues found"
            echo "üí° Run 'markdownlint-cli2 --fix \"**/*.md\"' to auto-fix issues"
            MARKDOWN_ERRORS=1
          fi
          
          # Check for common markdown issues
          echo "Checking for common Markdown issues..."
          find . -name "*.md" -not -path "./build/*" -not -path "./.git/*" | while read file; do
            # Check for broken relative links
            grep -n '\]\([^)]*\.md\)' "$file" | while IFS=: read line_num link; do
              link_path=$(echo "$link" | sed -n 's/.*\](\([^)]*\)).*/\1/p')
              if [ -n "$link_path" ] && [ ! -f "$(dirname "$file")/$link_path" ] && [ ! -f "$link_path" ]; then
                echo "‚ùå Broken link in $file:$line_num -> $link_path"
                echo "BROKEN_LINK_FOUND=1" >> /tmp/markdown_errors
              fi
            done
            
            # Check for missing alt text in images
            if grep -q '!\[\](' "$file"; then
              echo "‚ùå Images without alt text found in: $file"
              echo "MISSING_ALT_TEXT=1" >> /tmp/markdown_errors
            fi
            
            # Check for trailing whitespace
            if grep -q ' $' "$file"; then
              echo "‚ùå Trailing whitespace found in: $file"
              echo "TRAILING_WHITESPACE=1" >> /tmp/markdown_errors
            fi
          done
          
          # Check if any critical markdown errors were found
          if [ -f /tmp/markdown_errors ]; then
            if grep -q "BROKEN_LINK_FOUND=1" /tmp/markdown_errors; then
              echo "üí• CRITICAL: Broken markdown links detected - failing pipeline"
              MARKDOWN_ERRORS=1
            fi
            if grep -q "MISSING_ALT_TEXT=1" /tmp/markdown_errors; then
              echo "‚ö†Ô∏è  Warning: Missing alt text detected (non-blocking)"
            fi
            if grep -q "TRAILING_WHITESPACE=1" /tmp/markdown_errors; then
              echo "‚ö†Ô∏è  Warning: Trailing whitespace detected (non-blocking)"
            fi
          fi
          
          # Fail if critical errors found
          if [ $MARKDOWN_ERRORS -eq 1 ]; then
            echo "‚ùå Markdown validation failed due to critical issues"
            echo "üí° Fix broken links and run 'markdownlint-cli2 --fix \"**/*.md\"' to auto-fix other issues"
            exit 1
          else
            echo "‚úÖ Markdown validation passed"
          fi
          
        else
          echo "‚ÑπÔ∏è  markdownlint-cli2 not available, skipping"
        fi

    - name: Mermaid diagram validation
      if: matrix.check-type == 'yaml-markdown'
      run: |
        echo "üîç Checking Mermaid diagrams..."
        MERMAID_ERRORS=0
        
        if command -v mmdc >/dev/null 2>&1; then
          # Find files containing mermaid diagrams
          MERMAID_FILES=$(grep -r '\`\`\`mermaid' . --include="*.md" --exclude-dir=build --exclude-dir=node_modules | cut -d: -f1 | sort -u || true)
          
          if [ -n "$MERMAID_FILES" ]; then
            echo "Found Mermaid diagrams in:"
            echo "$MERMAID_FILES"
            
            # Extract and validate each mermaid block
            for file in $MERMAID_FILES; do
              echo "Validating Mermaid diagrams in: $file"
              # This is a basic check - extract mermaid blocks and validate syntax
              awk '/\`\`\`mermaid/,/\`\`\`/' "$file" | grep -v '\`\`\`' > /tmp/mermaid_temp.mmd 2>/dev/null || true
              if [ -s /tmp/mermaid_temp.mmd ]; then
                if ! mmdc -i /tmp/mermaid_temp.mmd -o /tmp/mermaid_test.png 2>/dev/null; then
                  echo "‚ùå Mermaid diagram validation failed in $file"
                  MERMAID_ERRORS=1
                else
                  echo "‚úÖ Mermaid diagram valid in $file"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è  No Mermaid diagrams found"
          fi
          
          # Fail if Mermaid errors found
          if [ $MERMAID_ERRORS -eq 1 ]; then
            echo "‚ùå Mermaid diagram validation failed"
            exit 1
          fi
        else
          echo "‚ÑπÔ∏è  Mermaid CLI not available, skipping diagram validation"
        fi

    - name: C++ code formatting check
      if: matrix.check-type == 'cpp-analysis'
      run: |
        echo "üîç Checking C++ code formatting with clang-format..."
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          FORMAT_ISSUES=0
          for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
            if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
              echo "‚ùå Formatting issues in: $file"
              FORMAT_ISSUES=1
              # Show the diff
              echo "Expected formatting for $file:"
              clang-format "$file" | diff "$file" - || true
            else
              echo "‚úÖ Properly formatted: $file"
            fi
          done
          
          if [ $FORMAT_ISSUES -eq 1 ]; then
            echo "‚ùå C++ formatting validation failed"
            echo "üí° Run 'find src tests -name \"*.cpp\" -o -name \"*.hpp\" | xargs clang-format -i' to fix formatting"
            exit 1
          else
            echo "‚úÖ All C++ files properly formatted"
          fi
        else
          echo "‚ÑπÔ∏è  No C++ files found"
        fi

    - name: C++ static analysis and complexity checks
      if: matrix.check-type == 'cpp-analysis'
      run: |
        echo "üîç Running C++ static analysis and complexity checks..."
        
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          # Run cppcheck for static analysis
          echo "Running cppcheck static analysis..."
          cppcheck --enable=all --std=c++17 --verbose \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --xml --xml-version=2 \
            src/ tests/ 2>cppcheck-report.xml || true
          
          if [ -s cppcheck-report.xml ]; then
            echo "üìä cppcheck found issues:"
            grep -o 'msg="[^"]*"' cppcheck-report.xml | head -10 || true
          else
            echo "‚úÖ No issues found by cppcheck"
          fi
          
          # Build project for clang-tidy analysis
          echo "Building project for static analysis..."
          mkdir -p build-analysis && cd build-analysis
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON >/dev/null 2>&1 || true
          
          if [ -f compile_commands.json ]; then
            cd ..
            echo "Running clang-tidy analysis..."
            find src -name "*.cpp" | head -5 | while read file; do
              echo "Analyzing: $file"
              clang-tidy "$file" -p build-analysis -- \
                -I src/inc -I build-analysis/include 2>/dev/null || \
                echo "‚ö†Ô∏è  clang-tidy issues in $file"
            done
          else
            cd ..
            echo "‚ö†Ô∏è  Could not generate compile commands for clang-tidy"
          fi
          
          # Complexity analysis using a simple script
          echo "Running complexity analysis..."
          for file in $(find src -name "*.cpp" 2>/dev/null); do
            echo "Complexity analysis for: $file"
            # Count cyclomatic complexity indicators
            complexity=$(grep -c -E "(if|while|for|case|catch|\?|&&|\|\|)" "$file" 2>/dev/null || echo "0")
            lines=$(wc -l < "$file" 2>/dev/null || echo "0")
            functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*.*(" "$file" 2>/dev/null || echo "0")
            
            echo "  Lines: $lines, Estimated complexity: $complexity, Functions: $functions"
            
            if [ "$complexity" -gt 50 ]; then
              echo "  ‚ö†Ô∏è  High complexity detected (>50 complexity indicators)"
            elif [ "$complexity" -gt 25 ]; then
              echo "  ‚ö†Ô∏è  Medium complexity detected (>25 complexity indicators)"
            else
              echo "  ‚úÖ Good complexity level"
            fi
          done
        else
          echo "‚ÑπÔ∏è  No C++ files found for analysis"
        fi

    - name: File validation and encoding checks
      if: matrix.check-type == 'file-validation'
      run: |
        echo "üîç Running file validation and encoding checks..."
        FILE_ERRORS=0
        
        # Check file encodings
        echo "Checking file encodings..."
        find . -type f \( -name "*.cpp" -o -name "*.hpp" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" \) \
          -not -path "./build/*" -not -path "./.git/*" | while read file; do
          if file "$file" | grep -q "UTF-8"; then
            echo "‚úÖ UTF-8 encoding: $file"
          else
            echo "‚ùå Non-UTF-8 encoding: $file"
            echo "ENCODING_ERROR=1" >> /tmp/file_errors
          fi
        done
        
        # Check for executable files that shouldn't be
        echo "Checking for unexpected executable files..."
        find . -type f -executable \
          -not -path "./.git/*" -not -path "./build/*" \
          -not -name "*.sh" -not -name "ninja_util" | while read file; do
          echo "‚ùå Unexpected executable: $file"
          echo "EXECUTABLE_ERROR=1" >> /tmp/file_errors
        done || echo "‚úÖ No unexpected executable files found"
        
        # Check file sizes
        echo "Checking for large files..."
        find . -type f -size +1M \
          -not -path "./.git/*" -not -path "./build/*" | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "‚ùå Large file detected: $file ($size)"
          echo "LARGE_FILE_ERROR=1" >> /tmp/file_errors
        done || echo "‚úÖ No large files found"
        
        # Check for file validation errors
        if [ -f /tmp/file_errors ]; then
          if grep -q "ENCODING_ERROR=1\|EXECUTABLE_ERROR=1\|LARGE_FILE_ERROR=1" /tmp/file_errors; then
            echo "‚ùå File validation failed due to critical issues"
            FILE_ERRORS=1
          fi
        fi
        
        # Fail if file validation errors found
        if [ $FILE_ERRORS -eq 1 ]; then
          echo "‚ùå File validation failed"
          exit 1
        else
          echo "‚úÖ File validation passed"
        fi

    - name: Documentation validation and coverage
      if: matrix.check-type == 'docs-validation'
      run: |
        echo "üìö Running documentation validation..."
        DOC_ERRORS=0
        
        # Check for README files
        if [ -f README.md ]; then
          echo "‚úÖ README.md found"
          
          # Check README content quality
          README_SIZE=$(wc -w < README.md)
          if [ "$README_SIZE" -lt 50 ]; then
            echo "‚ùå README.md seems too short ($README_SIZE words)"
            DOC_ERRORS=1
          else
            echo "‚úÖ README.md has good content ($README_SIZE words)"
          fi
          
          # Check for essential sections
          for section in "installation" "usage" "build" "license"; do
            if grep -qi "$section" README.md; then
              echo "‚úÖ $section section found in README"
            else
              echo "‚ùå $section section missing from README"
              DOC_ERRORS=1
            fi
          done
        else
          echo "‚ùå README.md not found"
          DOC_ERRORS=1
        fi
        
        # Check for documentation directory
        if [ -d "doc/" ]; then
          echo "‚úÖ Documentation directory found"
          find doc/ -name "*.md" | head -5 | while read file; do
            echo "  üìÑ Found: $file"
          done
        else
          echo "‚ÑπÔ∏è  No doc/ directory found"
        fi
        
        # Check for inline documentation in source files
        if find src -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          echo "Checking for inline documentation..."
          DOCUMENTED_FILES=0
          TOTAL_FILES=0
          
          for file in $(find src -name "*.hpp" 2>/dev/null); do
            TOTAL_FILES=$((TOTAL_FILES + 1))
            if grep -q "/\*\*\|///" "$file"; then
              DOCUMENTED_FILES=$((DOCUMENTED_FILES + 1))
              echo "‚úÖ Documentation found in: $file"
            else
              echo "‚ö†Ô∏è  No documentation in: $file"
            fi
          done
          
          if [ "$TOTAL_FILES" -gt 0 ]; then
            COVERAGE=$((DOCUMENTED_FILES * 100 / TOTAL_FILES))
            echo "üìä Documentation coverage: $COVERAGE% ($DOCUMENTED_FILES/$TOTAL_FILES files)"
            
            if [ "$COVERAGE" -ge 80 ]; then
              echo "‚úÖ Good documentation coverage"
            elif [ "$COVERAGE" -ge 50 ]; then
              echo "‚ö†Ô∏è  Moderate documentation coverage"
            else
              echo "‚ùå Low documentation coverage (<50%)"
              DOC_ERRORS=1
            fi
          fi
        fi
        
        # Check if Doxygen configuration exists
        if [ -f "Doxyfile" ] || [ -f "docs/Doxyfile" ] || [ -f "doc/Doxyfile" ]; then
          echo "‚úÖ Doxygen configuration found"
          
          # Test Doxygen build if possible
          if command -v doxygen >/dev/null 2>&1; then
            echo "Testing Doxygen documentation build..."
            mkdir -p /tmp/doc-test
            if doxygen Doxyfile >/tmp/doc-test/doxygen.log 2>&1 || \
               doxygen docs/Doxyfile >/tmp/doc-test/doxygen.log 2>&1 || \
               doxygen doc/Doxyfile >/tmp/doc-test/doxygen.log 2>&1; then
              echo "‚úÖ Doxygen build successful"
            else
              echo "‚ùå Doxygen build failed"
              tail -10 /tmp/doc-test/doxygen.log 2>/dev/null || echo "No log available"
              DOC_ERRORS=1
            fi
          fi
        else
          echo "‚ÑπÔ∏è  No Doxygen configuration found"
        fi
        
        # Fail if critical documentation errors found
        if [ $DOC_ERRORS -eq 1 ]; then
          echo "‚ùå Documentation validation failed due to critical issues"
          exit 1
        else
          echo "‚úÖ Documentation validation passed"
        fi

    - name: Generate quality summary
      run: |
        echo "üìã Quality Check Summary - ${{ matrix.name }}"
        echo "============================================="
        echo "Check Type: ${{ matrix.check-type }}"
        echo "Timestamp: $(date)"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        
        case "${{ matrix.check-type }}" in
          "license-spdx")
            echo "‚úÖ License and SPDX compliance checks completed"
            ;;
          "yaml-markdown")
            echo "‚úÖ YAML and Markdown quality checks completed"
            ;;
          "cpp-analysis")
            echo "‚úÖ C++ static analysis and complexity checks completed"
            ;;
          "file-validation")
            echo "‚úÖ File validation and encoding checks completed"
            ;;
          "docs-validation")
            echo "‚úÖ Documentation validation and coverage checks completed"
            ;;
        esac

  # Job 3: Comprehensive build and test matrix (runs in parallel with quality)
  build-matrix:
    name: Build & Test
    needs: quick-checks
    if: needs.quick-checks.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: [22.04, 24.04]
        build-type: [Release]
        include:
          - ubuntu-version: 24.04
            build-type: Debug
            enable-tests: true
            enable-docs: true
          - ubuntu-version: 22.04
            qt-version: "6.4.*"
          - ubuntu-version: 24.04
            qt-version: "6.6.*"

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-${{ matrix.ubuntu-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          apt-${{ matrix.ubuntu-version }}-${{ env.CACHE_VERSION }}-
          apt-${{ matrix.ubuntu-version }}-

    - name: Install system dependencies
      run: |
        apt-get update -qq
        apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          git \
          pkg-config \
          curl \
          ca-certificates \
          software-properties-common \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          ccache

    - name: Install documentation tools
      if: matrix.enable-docs == true
      run: |
        echo "üìö Installing documentation tools..."
        apt-get install -y --no-install-recommends \
          doxygen \
          graphviz \
          plantuml \
          texlive-latex-base \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-latex-extra
        
        # Verify installation
        doxygen --version
        dot -V || echo "‚ö†Ô∏è  Graphviz not properly installed"

    - name: Install testing tools
      if: matrix.enable-tests == true
      run: |
        apt-get install -y --no-install-recommends \
          valgrind \
          cppcheck \
          clang-tidy

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/
          ~/.ccache
        key: build-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}-${{ hashFiles('src/**', 'CMakeLists.txt', '.github/workflows/ci.yml') }}
        restore-keys: |
          build-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}-
          build-${{ matrix.ubuntu-version }}-

    - name: Configure CMake
      run: |
        mkdir -p build && cd build
        ENABLE_TESTS=${{ (matrix.enable-tests == true && github.event.inputs.skip_tests != 'true') && 'ON' || 'OFF' }}
        ENABLE_DOCS=${{ matrix.enable-docs == true && 'ON' || 'OFF' }}
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTS=${ENABLE_TESTS} \
          -DBUILD_DOCS=${ENABLE_DOCS} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      run: |
        cd build
        ccache --zero-stats || true
        make -j$(nproc) VERBOSE=1
        ccache --show-stats || true

    - name: Run tests
      if: matrix.enable-tests == true && github.event.inputs.skip_tests != 'true'
      run: |
        cd build
        ctest --output-on-failure --verbose

    - name: Static analysis
      if: matrix.enable-tests == true
      run: |
        cd build
        echo "Running cppcheck..."
        cppcheck --enable=all --std=c++17 --verbose \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          ../src/ || true
        
        echo "Running clang-tidy..."
        find ../src -name "*.cpp" | head -5 | xargs -I {} clang-tidy {} -- -I../src/inc || true

    - name: Build documentation
      if: matrix.enable-docs == true
      run: |
        cd build
        echo "üî® Building documentation..."
        make docs || echo "‚ö†Ô∏è  Documentation build failed"
        
        # Verify documentation was generated
        if [ -d "doc/" ]; then
          echo "‚úÖ Documentation generated successfully"
          find doc/ -name "*.html" | head -5 | while read file; do
            echo "  üìÑ Generated: $file"
          done
        else
          echo "‚ùå No documentation output found"
        fi

    - name: Upload build artifacts
      if: matrix.build-type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ninja_util-ubuntu-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}
        path: |
          build/ninja_util
          VERSION
        retention-days: 30

    - name: Upload documentation
      if: matrix.enable-docs == true
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ matrix.ubuntu-version }}
        path: |
          build/doc/
          README.md
          doc/
        retention-days: 30
        if-no-files-found: warn

  # Job 4: Performance testing (optional, on specific triggers)
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[perf]')
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          build-essential \
          cmake \
          git \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          valgrind \
          time \
          bc

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build for performance testing
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        make -j$(nproc)

    - name: Run performance tests
      run: |
        cd build
        echo "üèÉ Running performance tests..."
        
        # Memory leak check
        if command -v valgrind >/dev/null 2>&1; then
          echo "Running valgrind memory check..."
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --log-file=valgrind.log ./ninja_util --help || true
          
          if grep -q "ERROR SUMMARY: 0 errors" valgrind.log; then
            echo "‚úÖ No memory leaks detected"
          else
            echo "‚ö†Ô∏è  Memory issues detected:"
            cat valgrind.log
          fi
        fi
        
        # Basic performance timing
        echo "Running basic performance tests..."
        time ./ninja_util --help >/dev/null
        
        echo "‚úÖ Performance tests completed"

  # Job 6: Release preparation (only on tag pushes)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-matrix, quality-compliance]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release/
        
        # Copy binaries
        find release-artifacts -name "ninja_util" -exec cp {} release/ \;
        
        # Copy documentation and project docs
        if [ -d "release-artifacts/documentation-24.04" ]; then
          echo "üìö Including documentation in release..."
          cp -r release-artifacts/documentation-24.04 release/docs
          echo "‚úÖ Documentation included"
        else
          echo "‚ö†Ô∏è  No documentation found for release"
        fi
        
        # Include project documentation
        cp README.md release/ 2>/dev/null || echo "‚ö†Ô∏è  README.md not found"
        cp LICENSE release/ 2>/dev/null || echo "‚ö†Ô∏è  LICENSE not found"
        cp VERSION release/ 2>/dev/null || echo "‚ö†Ô∏è  VERSION not found"
        
        # Create release package
        cd release
        echo "üì¶ Creating release package..."
        tar -czf ninja_util-$(cat ../VERSION 2>/dev/null || echo "unknown").tar.gz *
        echo "‚úÖ Release package created: ninja_util-$(cat ../VERSION 2>/dev/null || echo "unknown").tar.gz"

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: release/ninja_util-*.tar.gz
        retention-days: 90
