name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, dev, 'feature/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  BUILD_TYPE: Release
  CACHE_VERSION: v2
  DEBIAN_FRONTEND: noninteractive

jobs:
  # Job 1: Quick validation checks (fast feedback)
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.build-needed }}
      has-cpp-files: ${{ steps.files.outputs.cpp-files }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for relevant file changes
      id: changes
      run: |
        # Check if build is needed based on changed files
        if git diff --name-only HEAD~1 HEAD | grep -qE '\.(cpp|hpp|cmake|CMakeLists\.txt|yml|yaml)$'; then
          echo "build-needed=true" >> $GITHUB_OUTPUT
        else
          echo "build-needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Find C++ source files
      id: files
      run: |
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          echo "cpp-files=true" >> $GITHUB_OUTPUT
        else
          echo "cpp-files=false" >> $GITHUB_OUTPUT
        fi

    - name: Install formatting tools
      if: steps.files.outputs.cpp-files == 'true'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y clang-format

    - name: Check code formatting
      if: steps.files.outputs.cpp-files == 'true'
      run: |
        echo "üîç Checking C++ code formatting..."
        SOURCES=$(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null)
        
        FORMAT_ISSUES=0
        for file in $SOURCES; do
          if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
            echo "‚ùå Formatting issues in: $file"
            FORMAT_ISSUES=1
          fi
        done
        
        if [ $FORMAT_ISSUES -eq 1 ]; then
          echo "üí° Run 'find src tests -name \"*.cpp\" -o -name \"*.hpp\" | xargs clang-format -i' to fix formatting"
          exit 1
        fi
        echo "‚úÖ All files are properly formatted"

  # Job 2: Comprehensive build and test matrix
  build-matrix:
    name: Build & Test
    needs: quick-checks
    if: needs.quick-checks.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: [22.04, 24.04]
        build-type: [Release]
        include:
          - ubuntu-version: 24.04
            build-type: Debug
            enable-tests: true
            enable-docs: true
          - ubuntu-version: 22.04
            qt-version: "6.4.*"
          - ubuntu-version: 24.04
            qt-version: "6.6.*"

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-${{ matrix.ubuntu-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('.github/workflows/main-ci.yml') }}
        restore-keys: |
          apt-${{ matrix.ubuntu-version }}-${{ env.CACHE_VERSION }}-
          apt-${{ matrix.ubuntu-version }}-

    - name: Install system dependencies
      run: |
        apt-get update -qq
        apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          git \
          pkg-config \
          curl \
          ca-certificates \
          software-properties-common \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          ccache

    - name: Install documentation tools
      if: matrix.enable-docs == true
      run: |
        apt-get install -y --no-install-recommends \
          doxygen \
          graphviz

    - name: Install testing tools
      if: matrix.enable-tests == true
      run: |
        apt-get install -y --no-install-recommends \
          valgrind \
          cppcheck \
          clang-tidy

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/
          ~/.ccache
        key: build-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}-${{ hashFiles('src/**', 'CMakeLists.txt', '.github/workflows/main-ci.yml') }}
        restore-keys: |
          build-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}-
          build-${{ matrix.ubuntu-version }}-

    - name: Configure CMake
      run: |
        mkdir -p build && cd build
        ENABLE_TESTS=${{ (matrix.enable-tests == true && github.event.inputs.skip_tests != 'true') && 'ON' || 'OFF' }}
        ENABLE_DOCS=${{ matrix.enable-docs == true && 'ON' || 'OFF' }}
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTS=${ENABLE_TESTS} \
          -DBUILD_DOCS=${ENABLE_DOCS} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      run: |
        cd build
        ccache --zero-stats || true
        make -j$(nproc) VERBOSE=1
        ccache --show-stats || true

    - name: Run tests
      if: matrix.enable-tests == true && github.event.inputs.skip_tests != 'true'
      run: |
        cd build
        ctest --output-on-failure --verbose

    - name: Static analysis
      if: matrix.enable-tests == true
      run: |
        cd build
        echo "Running cppcheck..."
        cppcheck --enable=all --std=c++17 --verbose \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          ../src/ || true
        
        echo "Running clang-tidy..."
        find ../src -name "*.cpp" | head -5 | xargs -I {} clang-tidy {} -- -I../src/inc || true

    - name: Build documentation
      if: matrix.enable-docs == true
      run: |
        cd build
        make docs

    - name: Upload build artifacts
      if: matrix.build-type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ninja_util-ubuntu-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}
        path: |
          build/ninja_util
          VERSION
        retention-days: 30

    - name: Upload documentation
      if: matrix.enable-docs == true
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ matrix.ubuntu-version }}
        path: build/doc/
        retention-days: 30

  # Job 3: Quality and compliance checks (runs in parallel)
  quality-compliance:
    name: Quality & Compliance
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          git \
          curl \
          ca-certificates \
          python3 \
          python3-pip \
          python3-venv \
          file \
          jq \
          markdownlint-cli

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: /tmp/pip-cache
        key: pip-quality-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          pip-quality-${{ runner.os }}-

    - name: Setup Python environment
      run: |
        export PIP_CACHE_DIR=/tmp/pip-cache
        python3 -m pip install --upgrade pip
        # Add any Python-based tools here if needed

    - name: Copyright compliance check
      run: |
        echo "üîç Checking copyright compliance..."
        
        # Check for copyright headers in source files
        MISSING_COPYRIGHT=0
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
          if ! grep -q "Copyright" "$file"; then
            echo "‚ùå Missing copyright header: $file"
            MISSING_COPYRIGHT=1
          fi
        done
        
        if [ $MISSING_COPYRIGHT -eq 1 ]; then
          echo "üí° Add copyright headers to source files"
          # Don't fail for now, just warn
        else
          echo "‚úÖ All source files have copyright headers"
        fi

    - name: License compliance check
      run: |
        echo "üîç Checking license compliance..."
        
        # Check for LICENSE file
        if [ ! -f LICENSE ]; then
          echo "‚ùå No LICENSE file found"
          exit 1
        fi
        
        # Check README mentions license
        if ! grep -q -i license README.md; then
          echo "‚ö†Ô∏è  LICENSE not mentioned in README.md"
        fi
        
        echo "‚úÖ License compliance check passed"

    - name: Markdown linting
      run: |
        echo "üîç Linting Markdown files..."
        if command -v markdownlint >/dev/null 2>&1; then
          markdownlint . --ignore node_modules --ignore build || {
            echo "‚ö†Ô∏è  Markdown linting issues found (non-blocking)"
          }
        else
          echo "‚ÑπÔ∏è  markdownlint not available, skipping"
        fi

  # Job 4: Security scanning (weekly or on demand)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[security]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install security tools
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          cmake \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          jq

    - name: Dependency vulnerability scan
      run: |
        echo "üîç Scanning for dependency vulnerabilities..."
        
        # Check Qt6 versions
        echo "Checking Qt6 version..."
        pkg-config --modversion Qt6Core || echo "Qt6Core not found"
        
        # Check system package vulnerabilities (basic check)
        echo "Checking system packages..."
        dpkg -l | grep -E "(libudev|libevdev|qt6)" || echo "No matching packages found"
        
        echo "‚úÖ Basic dependency scan completed"

  # Job 5: Performance testing (optional, on specific triggers)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[perf]') || github.event_name == 'schedule'
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          build-essential \
          cmake \
          git \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          valgrind \
          time \
          bc

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build for performance testing
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        make -j$(nproc)

    - name: Run performance tests
      run: |
        cd build
        echo "üèÉ Running performance tests..."
        
        # Memory leak check
        if command -v valgrind >/dev/null 2>&1; then
          echo "Running valgrind memory check..."
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --log-file=valgrind.log ./ninja_util --help || true
          
          if grep -q "ERROR SUMMARY: 0 errors" valgrind.log; then
            echo "‚úÖ No memory leaks detected"
          else
            echo "‚ö†Ô∏è  Memory issues detected:"
            cat valgrind.log
          fi
        fi
        
        # Basic performance timing
        echo "Running basic performance tests..."
        time ./ninja_util --help >/dev/null
        
        echo "‚úÖ Performance tests completed"

  # Job 6: Release preparation (only on tag pushes)
  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [build-matrix, quality-compliance]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release/
        
        # Copy binaries
        find release-artifacts -name "ninja_util" -exec cp {} release/ \;
        
        # Copy documentation
        if [ -d "release-artifacts/documentation-24.04" ]; then
          cp -r release-artifacts/documentation-24.04 release/docs
        fi
        
        # Create release package
        cd release
        tar -czf ninja_util-$(cat ../VERSION).tar.gz *

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: release/ninja_util-*.tar.gz
        retention-days: 90
