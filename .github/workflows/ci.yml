name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, dev, 'feature/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  BUILD_TYPE: Release
  CACHE_VERSION: v2
  DEBIAN_FRONTEND: noninteractive

jobs:
  # Job 1: Quick validation checks (fast feedback)
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.build-needed }}
      has-cpp-files: ${{ steps.files.outputs.cpp-files }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for relevant file changes
      id: changes
      run: |
        # Check if build is needed based on changed files
        if git diff --name-only HEAD~1 HEAD | grep -qE '\.(cpp|hpp|cmake|CMakeLists\.txt|yml|yaml)$'; then
          echo "build-needed=true" >> $GITHUB_OUTPUT
        else
          echo "build-needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Find C++ source files
      id: files
      run: |
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          echo "cpp-files=true" >> $GITHUB_OUTPUT
        else
          echo "cpp-files=false" >> $GITHUB_OUTPUT
        fi

    - name: Install basic tools
      if: steps.files.outputs.cpp-files == 'true'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y file

    - name: Basic file validation
      if: steps.files.outputs.cpp-files == 'true'
      run: |
        echo "🔍 Running basic file validation..."
        SOURCES=$(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null)
        
        for file in $SOURCES; do
          # Check file encoding
          if file "$file" | grep -q "UTF-8"; then
            echo "✅ UTF-8 encoding: $file"
          else
            echo "⚠️  Non-UTF-8 encoding: $file"
          fi
          
          # Check for basic file structure
          if [ -s "$file" ]; then
            echo "✅ Non-empty file: $file"
          else
            echo "❌ Empty file: $file"
          fi
        done

  # Job 2: Comprehensive build and test matrix
  build-matrix:
    name: Build & Test
    needs: quick-checks
    if: needs.quick-checks.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: [22.04, 24.04]
        build-type: [Release]
        include:
          - ubuntu-version: 24.04
            build-type: Debug
            enable-tests: true
            enable-docs: true
          - ubuntu-version: 22.04
            qt-version: "6.4.*"
          - ubuntu-version: 24.04
            qt-version: "6.6.*"

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-${{ matrix.ubuntu-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          apt-${{ matrix.ubuntu-version }}-${{ env.CACHE_VERSION }}-
          apt-${{ matrix.ubuntu-version }}-

    - name: Install system dependencies
      run: |
        apt-get update -qq
        apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          git \
          pkg-config \
          curl \
          ca-certificates \
          software-properties-common \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          ccache

    - name: Install documentation tools
      if: matrix.enable-docs == true
      run: |
        apt-get install -y --no-install-recommends \
          doxygen \
          graphviz

    - name: Install testing tools
      if: matrix.enable-tests == true
      run: |
        apt-get install -y --no-install-recommends \
          valgrind \
          cppcheck \
          clang-tidy

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/
          ~/.ccache
        key: build-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}-${{ hashFiles('src/**', 'CMakeLists.txt', '.github/workflows/ci.yml') }}
        restore-keys: |
          build-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}-
          build-${{ matrix.ubuntu-version }}-

    - name: Configure CMake
      run: |
        mkdir -p build && cd build
        ENABLE_TESTS=${{ (matrix.enable-tests == true && github.event.inputs.skip_tests != 'true') && 'ON' || 'OFF' }}
        ENABLE_DOCS=${{ matrix.enable-docs == true && 'ON' || 'OFF' }}
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTS=${ENABLE_TESTS} \
          -DBUILD_DOCS=${ENABLE_DOCS} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      run: |
        cd build
        ccache --zero-stats || true
        make -j$(nproc) VERBOSE=1
        ccache --show-stats || true

    - name: Run tests
      if: matrix.enable-tests == true && github.event.inputs.skip_tests != 'true'
      run: |
        cd build
        ctest --output-on-failure --verbose

    - name: Static analysis
      if: matrix.enable-tests == true
      run: |
        cd build
        echo "Running cppcheck..."
        cppcheck --enable=all --std=c++17 --verbose \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          ../src/ || true
        
        echo "Running clang-tidy..."
        find ../src -name "*.cpp" | head -5 | xargs -I {} clang-tidy {} -- -I../src/inc || true

    - name: Build documentation
      if: matrix.enable-docs == true
      run: |
        cd build
        make docs

    - name: Upload build artifacts
      if: matrix.build-type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ninja_util-ubuntu-${{ matrix.ubuntu-version }}-${{ matrix.build-type }}
        path: |
          build/ninja_util
          VERSION
        retention-days: 30

    - name: Upload documentation
      if: matrix.enable-docs == true
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ matrix.ubuntu-version }}
        path: build/doc/
        retention-days: 30

  # Job 3: Quality and compliance checks (runs in parallel)
  quality-compliance:
    name: Quality & Compliance (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check-type: [license-spdx, yaml-markdown, cpp-analysis, file-validation]
        include:
          - check-type: license-spdx
            name: "License & SPDX"
            tools: "python3 python3-pip python3-venv licensecheck"
          - check-type: yaml-markdown
            name: "YAML & Markdown"
            tools: "nodejs npm yamllint"
          - check-type: cpp-analysis
            name: "C++ Analysis"
            tools: "clang-format cppcheck clang-tidy build-essential cmake pkg-config libudev-dev libevdev-dev qt6-base-dev qt6-connectivity-dev"
          - check-type: file-validation
            name: "File Validation"
            tools: "file jq"
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          git \
          curl \
          ca-certificates \
          ${{ matrix.tools }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache packages
      uses: actions/cache@v4
      with:
        path: |
          /tmp/pip-cache
          ~/.npm
        key: quality-${{ matrix.check-type }}-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          quality-${{ matrix.check-type }}-${{ runner.os }}-

    - name: Setup Python environment (if needed)
      if: matrix.check-type == 'license-spdx'
      run: |
        # licensecheck is now installed via apt, so no pip install needed
        echo "Python tools ready via system packages"

    - name: Install Node.js tools
      if: matrix.check-type == 'yaml-markdown'
      run: |
        npm install -g markdownlint-cli2 @mermaid-js/mermaid-cli yaml-lint

    - name: License compliance and SPDX check
      if: matrix.check-type == 'license-spdx'
      run: |
        echo "🔍 Checking SPDX identifiers..."
        
        # Check for SPDX identifiers in source files
        echo "Checking SPDX identifiers..."
        MISSING_SPDX=0
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
          if ! grep -q "SPDX-License-Identifier\|SPDX-FileCopyrightText" "$file"; then
            echo "❌ Missing SPDX identifier: $file"
            MISSING_SPDX=1
          else
            echo "✅ SPDX identifier found: $file"
          fi
        done
        
        # Check CMakeLists.txt for SPDX
        if [ -f CMakeLists.txt ]; then
          if grep -q "SPDX-License-Identifier\|SPDX-FileCopyrightText" CMakeLists.txt; then
            echo "✅ SPDX identifier found in CMakeLists.txt"
          else
            echo "⚠️  Missing SPDX identifier in CMakeLists.txt"
          fi
        fi
        
        # Use licensecheck if available
        if command -v licensecheck >/dev/null 2>&1; then
          echo "Running licensecheck on source files..."
          find src tests -name "*.cpp" -o -name "*.hpp" | head -5 | \
            xargs licensecheck 2>/dev/null || echo "licensecheck completed with warnings"
        fi
        
        if [ $MISSING_SPDX -eq 1 ]; then
          echo "💡 Add SPDX identifiers to source files"
          echo "Example:"
          echo "// SPDX-License-Identifier: Apache-2.0"
          echo "// SPDX-FileCopyrightText: $(date +%Y) Your Name"
          # Don't fail for now, just warn
        else
          echo "✅ All source files have SPDX identifiers"
        fi

    - name: License file and header validation
      if: matrix.check-type == 'license-spdx'
      run: |
        echo "🔍 Comprehensive license validation..."
        
        # Check for LICENSE file existence and content
        if [ ! -f LICENSE ]; then
          echo "❌ No LICENSE file found at repository root"
          exit 1
        else
          echo "✅ LICENSE file found"
          
          # Check LICENSE file content
          LICENSE_TYPE=""
          if grep -q "Apache License" LICENSE; then
            LICENSE_TYPE="Apache-2.0"
            echo "✅ Apache License 2.0 detected"
          elif grep -q "MIT License" LICENSE; then
            LICENSE_TYPE="MIT"
            echo "✅ MIT License detected"
          elif grep -q "GNU General Public License" LICENSE; then
            LICENSE_TYPE="GPL"
            echo "✅ GPL License detected"
          else
            echo "⚠️  License type not clearly identified"
          fi
          
          # Validate LICENSE file is not empty and has reasonable content
          LICENSE_SIZE=$(wc -c < LICENSE)
          if [ "$LICENSE_SIZE" -lt 100 ]; then
            echo "⚠️  LICENSE file seems too short ($LICENSE_SIZE characters)"
          else
            echo "✅ LICENSE file has substantial content ($LICENSE_SIZE characters)"
          fi
        fi
        
        # Check if README mentions license
        if [ -f README.md ]; then
          if grep -q -i license README.md; then
            echo "✅ License mentioned in README.md"
          else
            echo "⚠️  License not mentioned in README.md"
          fi
        fi
        
        # Check for license headers in source files
        echo "Checking license headers in source files..."
        MISSING_HEADERS=0
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
          if ! head -10 "$file" | grep -q -i "license\|copyright\|spdx"; then
            echo "❌ Missing license header: $file"
            MISSING_HEADERS=1
          else
            echo "✅ License header found: $file"
          fi
        done
        
        if [ $MISSING_HEADERS -eq 1 ]; then
          echo "💡 Add license headers to source files"
          echo "Example header:"
          echo "// SPDX-License-Identifier: Apache-2.0"
          echo "// SPDX-FileCopyrightText: $(date +%Y) Your Name"
          echo "//"
          echo "// Licensed under the Apache License, Version 2.0..."
        fi

    - name: YAML linting
      if: matrix.check-type == 'yaml-markdown'
      run: |
        echo "🔍 Linting YAML files..."
        if command -v yamllint >/dev/null 2>&1; then
          yamllint .github/workflows/ || {
            echo "⚠️  YAML linting issues found"
          }
        else
          echo "ℹ️  yamllint not available, skipping"
        fi
        
        # Additional YAML validation with yaml-lint
        if command -v yaml-lint >/dev/null 2>&1; then
          find . -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Checking: $file"
            yaml-lint "$file" || echo "⚠️  Issues in $file"
          done
        fi

    - name: Markdown linting with markdownlint-cli2
      if: matrix.check-type == 'yaml-markdown'
      run: |
        echo "🔍 Linting Markdown files with markdownlint-cli2..."
        if command -v markdownlint-cli2 >/dev/null 2>&1; then
          markdownlint-cli2 "**/*.md" --ignore node_modules --ignore build || {
            echo "⚠️  Markdown linting issues found (non-blocking)"
          }
        else
          echo "ℹ️  markdownlint-cli2 not available, skipping"
        fi

    - name: Mermaid diagram validation
      if: matrix.check-type == 'yaml-markdown'
      run: |
        echo "🔍 Checking Mermaid diagrams..."
        if command -v mmdc >/dev/null 2>&1; then
          # Find files containing mermaid diagrams
          MERMAID_FILES=$(grep -r '\`\`\`mermaid' . --include="*.md" --exclude-dir=build --exclude-dir=node_modules | cut -d: -f1 | sort -u || true)
          
          if [ -n "$MERMAID_FILES" ]; then
            echo "Found Mermaid diagrams in:"
            echo "$MERMAID_FILES"
            
            # Extract and validate each mermaid block
            for file in $MERMAID_FILES; do
              echo "Validating Mermaid diagrams in: $file"
              # This is a basic check - extract mermaid blocks and validate syntax
              awk '/\`\`\`mermaid/,/\`\`\`/' "$file" | grep -v '\`\`\`' > /tmp/mermaid_temp.mmd 2>/dev/null || true
              if [ -s /tmp/mermaid_temp.mmd ]; then
                mmdc -i /tmp/mermaid_temp.mmd -o /tmp/mermaid_test.png 2>/dev/null && \
                  echo "✅ Mermaid diagram valid in $file" || \
                  echo "⚠️  Mermaid diagram issues in $file"
              fi
            done
          else
            echo "ℹ️  No Mermaid diagrams found"
          fi
        else
          echo "ℹ️  Mermaid CLI not available, skipping diagram validation"
        fi

    - name: C++ code formatting check
      if: matrix.check-type == 'cpp-analysis'
      run: |
        echo "🔍 Checking C++ code formatting with clang-format..."
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          FORMAT_ISSUES=0
          for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null); do
            if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
              echo "❌ Formatting issues in: $file"
              FORMAT_ISSUES=1
              # Show the diff
              echo "Expected formatting for $file:"
              clang-format "$file" | diff "$file" - || true
            else
              echo "✅ Properly formatted: $file"
            fi
          done
          
          if [ $FORMAT_ISSUES -eq 1 ]; then
            echo "💡 Run 'find src tests -name \"*.cpp\" -o -name \"*.hpp\" | xargs clang-format -i' to fix formatting"
            # Don't fail, just warn
          fi
        else
          echo "ℹ️  No C++ files found"
        fi

    - name: C++ static analysis and complexity checks
      if: matrix.check-type == 'cpp-analysis'
      run: |
        echo "🔍 Running C++ static analysis and complexity checks..."
        
        if find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null | grep -q .; then
          # Run cppcheck for static analysis
          echo "Running cppcheck static analysis..."
          cppcheck --enable=all --std=c++17 --verbose \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --xml --xml-version=2 \
            src/ tests/ 2>cppcheck-report.xml || true
          
          if [ -s cppcheck-report.xml ]; then
            echo "📊 cppcheck found issues:"
            grep -o 'msg="[^"]*"' cppcheck-report.xml | head -10 || true
          else
            echo "✅ No issues found by cppcheck"
          fi
          
          # Build project for clang-tidy analysis
          echo "Building project for static analysis..."
          mkdir -p build-analysis && cd build-analysis
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON >/dev/null 2>&1 || true
          
          if [ -f compile_commands.json ]; then
            cd ..
            echo "Running clang-tidy analysis..."
            find src -name "*.cpp" | head -5 | while read file; do
              echo "Analyzing: $file"
              clang-tidy "$file" -p build-analysis -- \
                -I src/inc -I build-analysis/include 2>/dev/null || \
                echo "⚠️  clang-tidy issues in $file"
            done
          else
            cd ..
            echo "⚠️  Could not generate compile commands for clang-tidy"
          fi
          
          # Complexity analysis using a simple script
          echo "Running complexity analysis..."
          for file in $(find src -name "*.cpp" 2>/dev/null); do
            echo "Complexity analysis for: $file"
            # Count cyclomatic complexity indicators
            complexity=$(grep -c -E "(if|while|for|case|catch|\?|&&|\|\|)" "$file" 2>/dev/null || echo "0")
            lines=$(wc -l < "$file" 2>/dev/null || echo "0")
            functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*.*(" "$file" 2>/dev/null || echo "0")
            
            echo "  Lines: $lines, Estimated complexity: $complexity, Functions: $functions"
            
            if [ "$complexity" -gt 50 ]; then
              echo "  ⚠️  High complexity detected (>50 complexity indicators)"
            elif [ "$complexity" -gt 25 ]; then
              echo "  ⚠️  Medium complexity detected (>25 complexity indicators)"
            else
              echo "  ✅ Good complexity level"
            fi
          done
        else
          echo "ℹ️  No C++ files found for analysis"
        fi

    - name: File validation and encoding checks
      if: matrix.check-type == 'file-validation'
      run: |
        echo "🔍 Running file validation and encoding checks..."
        
        # Check file encodings
        echo "Checking file encodings..."
        find . -type f \( -name "*.cpp" -o -name "*.hpp" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" \) \
          -not -path "./build/*" -not -path "./.git/*" | while read file; do
          if file "$file" | grep -q "UTF-8"; then
            echo "✅ UTF-8 encoding: $file"
          else
            echo "⚠️  Non-UTF-8 encoding: $file"
          fi
        done
        
        # Check for executable files that shouldn't be
        echo "Checking for unexpected executable files..."
        find . -type f -executable \
          -not -path "./.git/*" -not -path "./build/*" \
          -not -name "*.sh" -not -name "ninja_util" | while read file; do
          echo "⚠️  Unexpected executable: $file"
        done || echo "✅ No unexpected executable files found"
        
        # Check file sizes
        echo "Checking for large files..."
        find . -type f -size +1M \
          -not -path "./.git/*" -not -path "./build/*" | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "⚠️  Large file detected: $file ($size)"
        done || echo "✅ No large files found"

    - name: Generate quality summary
      run: |
        echo "📋 Quality Check Summary - ${{ matrix.name }}"
        echo "============================================="
        echo "Check Type: ${{ matrix.check-type }}"
        echo "Timestamp: $(date)"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        
        case "${{ matrix.check-type }}" in
          "license-spdx")
            echo "✅ License and SPDX compliance checks completed"
            ;;
          "yaml-markdown")
            echo "✅ YAML and Markdown quality checks completed"
            ;;
          "cpp-analysis")
            echo "✅ C++ static analysis and complexity checks completed"
            ;;
          "file-validation")
            echo "✅ File validation and encoding checks completed"
            ;;
        esac

  # Job 4: Performance testing (optional, on specific triggers)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[perf]')
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          build-essential \
          cmake \
          git \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-connectivity-dev \
          valgrind \
          time \
          bc

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build for performance testing
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        make -j$(nproc)

    - name: Run performance tests
      run: |
        cd build
        echo "🏃 Running performance tests..."
        
        # Memory leak check
        if command -v valgrind >/dev/null 2>&1; then
          echo "Running valgrind memory check..."
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --log-file=valgrind.log ./ninja_util --help || true
          
          if grep -q "ERROR SUMMARY: 0 errors" valgrind.log; then
            echo "✅ No memory leaks detected"
          else
            echo "⚠️  Memory issues detected:"
            cat valgrind.log
          fi
        fi
        
        # Basic performance timing
        echo "Running basic performance tests..."
        time ./ninja_util --help >/dev/null
        
        echo "✅ Performance tests completed"

  # Job 6: Release preparation (only on tag pushes)
  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [build-matrix, quality-compliance]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release/
        
        # Copy binaries
        find release-artifacts -name "ninja_util" -exec cp {} release/ \;
        
        # Copy documentation
        if [ -d "release-artifacts/documentation-24.04" ]; then
          cp -r release-artifacts/documentation-24.04 release/docs
        fi
        
        # Create release package
        cd release
        tar -czf ninja_util-$(cat ../VERSION).tar.gz *

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: release/ninja_util-*.tar.gz
        retention-days: 90
