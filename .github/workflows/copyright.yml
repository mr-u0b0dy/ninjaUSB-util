name: Copyright Compliance

# Dedicated workflow for comprehensive copyright compliance checking
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Monday at 4 AM UTC
  workflow_dispatch:  # Allow manual trigger

env:
  CACHE_VERSION: v1

jobs:
  comprehensive-copyright-check:
    name: Comprehensive Copyright Analysis
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        DEBIAN_FRONTEND=noninteractive apt-get install -y \
          git \
          curl \
          ca-certificates \
          python3 \
          python3-pip \
          python3-venv \
          grep \
          find \
          sed \
          awk \
          file \
          zip \
          unzip

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for copyright year analysis

    # Cache Python environment
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-copyright-full-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          pip-copyright-full-${{ runner.os }}-

    - name: Setup Python environment
      run: |
        python3 -m venv /opt/copyright-env
        . /opt/copyright-env/bin/activate
        pip install --upgrade pip
        pip install licensecheck scancode-toolkit copyright-header

    - name: Analyze file copyright status
      id: file-analysis
      run: |
        . /opt/copyright-env/bin/activate
        
        echo "üîç Comprehensive copyright analysis..."
        
        # Create output directory
        mkdir -p copyright_analysis
        
        # Define file patterns to check
        SOURCE_PATTERNS="-name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h'"
        SCRIPT_PATTERNS="-name '*.py' -o -name '*.sh' -o -name '*.bash'"
        DOC_PATTERNS="-name '*.md' -o -name '*.rst' -o -name '*.txt'"
        
        # Find all relevant files
        eval "find . -type f \( $SOURCE_PATTERNS -o $SCRIPT_PATTERNS -o $DOC_PATTERNS \) \
          -not -path './build/*' \
          -not -path './.git/*' \
          -not -path './.*/*'" > all_files.txt
        
        echo "Found $(wc -l < all_files.txt) files to analyze"
        
        # Analyze each file
        missing_copyright=0
        outdated_copyright=0
        good_copyright=0
        suspicious_files=0
        
        current_year=$(date +%Y)
        
        cat > copyright_analysis/detailed_report.txt << EOF
        Copyright Compliance Analysis Report
        ====================================
        Generated: $(date -u)
        Repository: ${{ github.repository }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        
        EOF
        
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "Analyzing: $file"
            
            # Check file type
            file_type=$(file -b "$file" | cut -d',' -f1)
            
            # Check for copyright patterns
            copyright_found=false
            copyright_year=""
            
            # Look for various copyright patterns
            if grep -iE "(copyright|¬©|\(c\))" "$file" >/dev/null 2>&1; then
              copyright_found=true
              copyright_year=$(grep -iE "(copyright|¬©|\(c\)).*[0-9]{4}" "$file" | head -1 | grep -oE "[0-9]{4}" | tail -1)
            fi
            
            # Analyze copyright status
            if [ "$copyright_found" = false ]; then
              echo "$file" >> copyright_analysis/missing_copyright.txt
              echo "  ‚ùå Missing copyright"
              missing_copyright=$((missing_copyright + 1))
              
              echo "MISSING: $file" >> copyright_analysis/detailed_report.txt
              
            elif [ -n "$copyright_year" ] && [ "$copyright_year" -lt $((current_year - 1)) ]; then
              echo "$file" >> copyright_analysis/outdated_copyright.txt
              echo "  ‚ö†Ô∏è  Outdated copyright year: $copyright_year"
              outdated_copyright=$((outdated_copyright + 1))
              
              echo "OUTDATED: $file (year: $copyright_year)" >> copyright_analysis/detailed_report.txt
              
            else
              echo "$file" >> copyright_analysis/good_copyright.txt
              echo "  ‚úÖ Good copyright"
              good_copyright=$((good_copyright + 1))
              
              echo "GOOD: $file" >> copyright_analysis/detailed_report.txt
            fi
            
            # Check for suspicious patterns
            if grep -l "TODO.*copyright\|FIXME.*copyright\|borrowed from\|copied from\|adapted from\|stolen from" "$file" 2>/dev/null; then
              echo "$file" >> copyright_analysis/suspicious_files.txt
              echo "  üö® Suspicious patterns found"
              suspicious_files=$((suspicious_files + 1))
            fi
          fi
        done < all_files.txt
        
        # Generate summary
        total_files=$(wc -l < all_files.txt)
        
        cat >> copyright_analysis/detailed_report.txt << EOF
        
        Summary Statistics
        ==================
        Total files analyzed: $total_files
        Files with good copyright: $good_copyright
        Files missing copyright: $missing_copyright
        Files with outdated copyright: $outdated_copyright
        Files with suspicious patterns: $suspicious_files
        
        Compliance rate: $(( (good_copyright * 100) / total_files ))%
        EOF
        
        echo "total-files=$total_files" >> $GITHUB_OUTPUT
        echo "missing-copyright=$missing_copyright" >> $GITHUB_OUTPUT
        echo "outdated-copyright=$outdated_copyright" >> $GITHUB_OUTPUT
        echo "good-copyright=$good_copyright" >> $GITHUB_OUTPUT
        echo "suspicious-files=$suspicious_files" >> $GITHUB_OUTPUT
        echo "compliance-rate=$(( (good_copyright * 100) / total_files ))" >> $GITHUB_OUTPUT
        
        # Determine if action is needed
        if [ "$missing_copyright" -gt 0 ] || [ "$outdated_copyright" -gt 0 ] || [ "$suspicious_files" -gt 0 ]; then
          echo "action-needed=true" >> $GITHUB_OUTPUT
        else
          echo "action-needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Check copyright year consistency with Git history
      run: |
        echo "üîç Checking copyright year consistency with Git history..."
        
        mkdir -p git_analysis
        
        # Check files that have been modified recently
        git log --name-only --since="1 year ago" --pretty=format: | sort -u | grep -E '\.(cpp|hpp|c|h|py|sh)$' > recently_modified.txt
        
        echo "Files modified in the last year:"
        cat recently_modified.txt
        
        # For each recently modified file, check if copyright year is current
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            last_modified_year=$(git log -1 --format="%ad" --date=format:"%Y" -- "$file" 2>/dev/null || echo "unknown")
            copyright_year=$(grep -iE "(copyright|¬©|\(c\)).*[0-9]{4}" "$file" 2>/dev/null | head -1 | grep -oE "[0-9]{4}" | tail -1 || echo "none")
            
            if [ "$copyright_year" != "none" ] && [ "$last_modified_year" != "unknown" ]; then
              if [ "$copyright_year" -lt "$last_modified_year" ]; then
                echo "$file: copyright=$copyright_year, last_modified=$last_modified_year" >> git_analysis/stale_copyright.txt
                echo "‚ö†Ô∏è  $file: Copyright year ($copyright_year) older than last modification ($last_modified_year)"
              fi
            fi
          fi
        done < recently_modified.txt

    - name: Generate copyright remediation script
      run: |
        echo "üìù Generating copyright remediation scripts..."
        
        current_year=$(date +%Y)
        
        # Create script to add missing copyright headers
        cat > add_copyright_headers.sh << 'EOF'
        #!/bin/bash
        # Script to add copyright headers to files missing them
        
        CURRENT_YEAR=$(date +%Y)
        COPYRIGHT_HOLDER="[Your Name/Organization]"  # UPDATE THIS
        LICENSE="MIT"  # UPDATE THIS
        
        add_cpp_header() {
          local file="$1"
          cat > temp_header.txt << HEADER
        /*
         * Copyright (c) $CURRENT_YEAR $COPYRIGHT_HOLDER
         * SPDX-License-Identifier: $LICENSE
         */
        
        HEADER
          cat "$file" >> temp_header.txt
          mv temp_header.txt "$file"
          echo "Added copyright header to: $file"
        }
        
        add_script_header() {
          local file="$1"
          local shebang=$(head -1 "$file")
          
          if [[ $shebang == \#!* ]]; then
            # Keep shebang, add copyright after
            echo "$shebang" > temp_header.txt
            cat >> temp_header.txt << HEADER
        #
        # Copyright (c) $CURRENT_YEAR $COPYRIGHT_HOLDER
        # SPDX-License-Identifier: $LICENSE
        #
        
        HEADER
            tail -n +2 "$file" >> temp_header.txt
          else
            # No shebang, add copyright at top
            cat > temp_header.txt << HEADER
        #
        # Copyright (c) $CURRENT_YEAR $COPYRIGHT_HOLDER
        # SPDX-License-Identifier: $LICENSE
        #
        
        HEADER
            cat "$file" >> temp_header.txt
          fi
          mv temp_header.txt "$file"
          echo "Added copyright header to: $file"
        }
        
        # Process files
        if [ -f "copyright_analysis/missing_copyright.txt" ]; then
          while IFS= read -r file; do
            if [[ $file == *.cpp ]] || [[ $file == *.hpp ]] || [[ $file == *.c ]] || [[ $file == *.h ]]; then
              add_cpp_header "$file"
            elif [[ $file == *.py ]] || [[ $file == *.sh ]] || [[ $file == *.bash ]]; then
              add_script_header "$file"
            fi
          done < copyright_analysis/missing_copyright.txt
        fi
        
        echo "Copyright headers added. Please review and commit the changes."
        EOF
        
        chmod +x add_copyright_headers.sh
        
        # Create script to update outdated copyright years
        cat > update_copyright_years.sh << 'EOF'
        #!/bin/bash
        # Script to update outdated copyright years
        
        CURRENT_YEAR=$(date +%Y)
        
        if [ -f "copyright_analysis/outdated_copyright.txt" ]; then
          while IFS= read -r file; do
            echo "Updating copyright year in: $file"
            
            # Update various copyright formats
            sed -i -E "s/(Copyright \(c\) )[0-9]{4}/\1$CURRENT_YEAR/g" "$file"
            sed -i -E "s/(Copyright )[0-9]{4}/\1$CURRENT_YEAR/g" "$file"
            sed -i -E "s/(¬© )[0-9]{4}/\1$CURRENT_YEAR/g" "$file"
            
          done < copyright_analysis/outdated_copyright.txt
          
          echo "Copyright years updated. Please review and commit the changes."
        else
          echo "No files with outdated copyright found."
        fi
        EOF
        
        chmod +x update_copyright_years.sh

    - name: Create comprehensive issue for copyright compliance
      if: steps.file-analysis.outputs.action-needed == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `üìã Comprehensive Copyright Compliance Report - ${new Date().toISOString().split('T')[0]}`;
          
          const totalFiles = '${{ steps.file-analysis.outputs.total-files }}';
          const missingCopyright = '${{ steps.file-analysis.outputs.missing-copyright }}';
          const outdatedCopyright = '${{ steps.file-analysis.outputs.outdated-copyright }}';
          const goodCopyright = '${{ steps.file-analysis.outputs.good-copyright }}';
          const suspiciousFiles = '${{ steps.file-analysis.outputs.suspicious-files }}';
          const complianceRate = '${{ steps.file-analysis.outputs.compliance-rate }}';
          
          const body = `
          ## üìã Copyright Compliance Analysis Report
          
          A comprehensive copyright compliance analysis has been completed for the repository.
          
          ### üìä Compliance Summary
          
          | Metric | Count | Percentage |
          |--------|-------|------------|
          | **Total Files Analyzed** | ${totalFiles} | 100% |
          | **‚úÖ Compliant Files** | ${goodCopyright} | ${complianceRate}% |
          | **‚ùå Missing Copyright** | ${missingCopyright} | ${Math.round((missingCopyright/totalFiles)*100)}% |
          | **‚ö†Ô∏è Outdated Copyright** | ${outdatedCopyright} | ${Math.round((outdatedCopyright/totalFiles)*100)}% |
          | **üö® Suspicious Patterns** | ${suspiciousFiles} | ${Math.round((suspiciousFiles/totalFiles)*100)}% |
          
          **Overall Compliance Rate: ${complianceRate}%**
          
          ### üéØ Compliance Status
          
          ${complianceRate >= 95 ? 'üü¢ **EXCELLENT** - High compliance rate' :
            complianceRate >= 80 ? 'üü° **GOOD** - Moderate compliance, some improvements needed' :
            complianceRate >= 60 ? 'üü† **FAIR** - Significant improvements required' :
            'üî¥ **POOR** - Major compliance issues require immediate attention'}
          
          ### üìã Action Items
          
          ${missingCopyright > 0 ? `
          #### 1. Add Missing Copyright Headers (${missingCopyright} files)
          
          Download the remediation script from workflow artifacts and run:
          \`\`\`bash
          # 1. Update COPYRIGHT_HOLDER and LICENSE in the script
          # 2. Run the script
          chmod +x add_copyright_headers.sh
          ./add_copyright_headers.sh
          \`\`\`
          ` : ''}
          
          ${outdatedCopyright > 0 ? `
          #### 2. Update Outdated Copyright Years (${outdatedCopyright} files)
          
          \`\`\`bash
          chmod +x update_copyright_years.sh
          ./update_copyright_years.sh
          \`\`\`
          ` : ''}
          
          ${suspiciousFiles > 0 ? `
          #### 3. Review Suspicious Files (${suspiciousFiles} files)
          
          Manual review required for files with:
          - TODO/FIXME comments about copyright
          - References to "borrowed" or "copied" code
          - Large blocks of commented code
          ` : ''}
          
          ### üìö Best Practices
          
          1. **Consistent Format**: Use the same copyright format across all files
          2. **Annual Updates**: Update copyright years when files are modified
          3. **SPDX Identifiers**: Include SPDX license identifiers for clarity
          4. **Attribution**: Properly attribute any third-party code
          5. **Automation**: Set up pre-commit hooks to check new files
          
          ### üîß Recommended Copyright Format
          
          **For C++ files:**
          \`\`\`cpp
          /*
           * Copyright (c) ${new Date().getFullYear()} [Your Name/Organization]
           * SPDX-License-Identifier: MIT
           */
          \`\`\`
          
          **For script files:**
          \`\`\`bash
          #
          # Copyright (c) ${new Date().getFullYear()} [Your Name/Organization]  
          # SPDX-License-Identifier: MIT
          #
          \`\`\`
          
          ### üìÅ Detailed Reports
          
          Download the workflow artifacts for:
          - Complete file-by-file analysis
          - List of files requiring attention
          - Automated remediation scripts
          - Git history analysis
          
          **Workflow Run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *This comprehensive analysis was generated by the automated copyright compliance system.*
          `;
          
          // Check for existing copyright issues
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['copyright', 'compliance'],
            state: 'open'
          });
          
          const recentIssue = existingIssues.data.find(issue => 
            issue.title.includes('Copyright Compliance Report') && 
            new Date(issue.created_at) > new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) // Within 14 days
          );
          
          if (!recentIssue) {
            const priority = complianceRate >= 80 ? 'medium-priority' : 'high-priority';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['copyright', 'compliance', 'automated', priority, 'legal']
            });
            console.log('Created comprehensive copyright compliance issue');
          } else {
            console.log('Recent copyright compliance issue exists, skipping creation');
          }

    - name: Upload comprehensive copyright analysis
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: copyright-compliance-analysis-${{ github.sha }}
        path: |
          copyright_analysis/
          git_analysis/
          add_copyright_headers.sh
          update_copyright_years.sh
          all_files.txt
          recently_modified.txt
        retention-days: 90

    - name: Set compliance status
      run: |
        compliance_rate="${{ steps.file-analysis.outputs.compliance-rate }}"
        echo "üìä Overall Copyright Compliance: ${compliance_rate}%"
        
        if [ "$compliance_rate" -lt 80 ]; then
          echo "‚ùå Copyright compliance below 80% threshold"
          echo "::warning::Copyright compliance rate is ${compliance_rate}%. Consider addressing copyright issues before release."
          exit 1
        elif [ "$compliance_rate" -lt 95 ]; then
          echo "‚ö†Ô∏è Copyright compliance could be improved"
          echo "::notice::Copyright compliance rate is ${compliance_rate}%. Consider improving for better legal compliance."
        else
          echo "‚úÖ Excellent copyright compliance!"
        fi
