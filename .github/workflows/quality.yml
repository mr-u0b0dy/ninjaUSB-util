name: Quality Assurance

on:
  push:
    branches: [ '*' ]  # Run on all branches
  pull_request:
    branches: [ main, dev ]

env:
  BUILD_TYPE: Release
  CACHE_VERSION: v1

jobs:
  # Job 1: Code formatting check (fastest, runs first)
  code-formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          clang-format \
          git \
          curl \
          ca-certificates

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache clang-format
    - name: Cache clang-format
      uses: actions/cache@v4
      with:
        path: /usr/bin/clang-format
        key: clang-format-${{ runner.os }}-${{ env.CACHE_VERSION }}

    - name: Check clang-format version
      run: |
        clang-format --version
        echo "Using clang-format configuration:"
        cat .clang-format || echo "No .clang-format file found"

    - name: Run clang-format check
      run: |
        echo "üîç Checking C++ code formatting..."
        
        # Find all C++ source files
        SOURCES=$(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null || true)
        
        if [ -z "$SOURCES" ]; then
          echo "‚ÑπÔ∏è  No C++ source files found to check"
          exit 0
        fi
        
        echo "Found C++ files:"
        echo "$SOURCES"
        
        # Check formatting efficiently
        FORMATTING_ISSUES=false
        for file in $SOURCES; do
          echo "Checking: $file"
          
          if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
            echo "‚ùå $file is not properly formatted"
            clang-format --dry-run "$file" 2>&1 | head -10
            FORMATTING_ISSUES=true
          else
            echo "‚úÖ $file is properly formatted"
          fi
        done
        
        if [ "$FORMATTING_ISSUES" = true ]; then
          echo ""
          echo "‚ùå Code formatting issues found!"
          echo "Run the following to fix formatting:"
          echo "find src tests -name '*.cpp' -o -name '*.hpp' | xargs clang-format -i"
          exit 1
        else
          echo ""
          echo "‚úÖ All C++ files are properly formatted!"
        fi

  # Job 2: Markdown linting (runs in parallel)
  markdown-linting:
    name: Markdown Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    # Cache node_modules
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install markdownlint-cli2
      run: |
        npm install -g markdownlint-cli2

    - name: Run markdownlint
      run: |
        echo "üîç Checking Markdown files..."
        
        # Create inline markdownlint configuration
        cat > .markdownlint-cli2.jsonc << 'EOF'
        {
          "default": true,
          "MD013": {
            "line_length": 100,
            "code_blocks": false,
            "tables": false
          },
          "MD033": false,
          "MD041": false
        }
        EOF
        
        # Find all markdown files
        MD_FILES=$(find . -name "*.md" -not -path "./build/*" -not -path "./.git/*" 2>/dev/null || true)
        
        if [ -z "$MD_FILES" ]; then
          echo "‚ÑπÔ∏è  No Markdown files found to check"
          exit 0
        fi
        
        echo "Found Markdown files:"
        echo "$MD_FILES"
        
        # Run markdownlint-cli2 using the inline configuration
        markdownlint-cli2 --config .markdownlint-cli2.jsonc $MD_FILES || {
          echo ""
          echo "‚ùå Markdown linting issues found!"
          echo "Check the output above for specific issues to fix."
          exit 1
        }
        
        # Clean up temporary config file
        rm -f .markdownlint-cli2.jsonc
        
        echo "‚úÖ All Markdown files pass linting!"

  # Job 3: Mermaid validation (runs in parallel)
  mermaid-validation:
    name: Mermaid Diagram Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Mermaid CLI
      run: |
        npm install -g @mermaid-js/mermaid-cli

    - name: Extract and validate Mermaid diagrams
      run: |
        echo "üîç Searching for Mermaid diagrams in Markdown files..."
        
        # Find all markdown files
        MD_FILES=$(find . -name "*.md" -not -path "./build/*" -not -path "./.git/*" 2>/dev/null || true)
        
        if [ -z "$MD_FILES" ]; then
          echo "‚ÑπÔ∏è  No Markdown files found to check"
          exit 0
        fi
        
        MERMAID_FOUND=false
        VALIDATION_FAILED=false
        
        # Create temp directory for diagrams
        mkdir -p temp_diagrams
        
        # Process each markdown file
        for md_file in $MD_FILES; do
          echo "Checking: $md_file"
          
          # Extract mermaid code blocks
          awk '
            /```mermaid/ { in_mermaid=1; next }
            /```/ && in_mermaid { in_mermaid=0; next }
            in_mermaid { print }
          ' "$md_file" > temp_mermaid.txt
          
          if [ -s temp_mermaid.txt ]; then
            MERMAID_FOUND=true
            echo "  üìä Found Mermaid diagram(s) in $md_file"
            
            # Create a proper mermaid file for validation
            diagram_file="temp_diagrams/$(basename "$md_file" .md).mmd"
            cp temp_mermaid.txt "$diagram_file"
            
            # Validate the diagram
            if mmdc -i "$diagram_file" -o "/tmp/test_output.svg" >/dev/null 2>&1; then
              echo "  ‚úÖ Mermaid diagram is valid"
            else
              echo "  ‚ùå Mermaid diagram validation failed in $md_file"
              echo "  Diagram content:"
              cat "$diagram_file" | sed 's/^/    /'
              VALIDATION_FAILED=true
            fi
          fi
          
          rm -f temp_mermaid.txt
        done
        
        # Clean up
        rm -rf temp_diagrams
        
        if [ "$MERMAID_FOUND" = false ]; then
          echo "‚ÑπÔ∏è  No Mermaid diagrams found in Markdown files"
        elif [ "$VALIDATION_FAILED" = true ]; then
          echo ""
          echo "‚ùå Mermaid diagram validation failed!"
          echo "Please check the diagram syntax in the files listed above."
          exit 1
        else
          echo ""
          echo "‚úÖ All Mermaid diagrams are valid!"
        fi

  # Job 4: Copyright compliance check
  copyright-check:
    name: Copyright Compliance Check
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt-get install -y \
          git \
          curl \
          ca-certificates \
          python3 \
          python3-pip \
          grep \
          find

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache Python packages
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-copyright-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          pip-copyright-${{ runner.os }}-

    - name: Install copyright checker tools
      run: |
        pip3 install --user licensecheck

    - name: Check copyright headers in source files
      id: copyright-headers
      run: |
        echo "üîç Checking copyright headers in source files..."
        
        # Define expected copyright patterns
        CURRENT_YEAR=$(date +%Y)
        COPYRIGHT_PATTERNS="Copyright.*[0-9]{4}|¬©.*[0-9]{4}|\(c\).*[0-9]{4}"
        
        missing_copyright=()
        outdated_copyright=()
        
        # Check C++ source files
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null || true); do
          if [ -f "$file" ]; then
            echo "Checking: $file"
            
            # Check if file has any copyright notice
            if ! grep -iE "$COPYRIGHT_PATTERNS" "$file" >/dev/null 2>&1; then
              missing_copyright+=("$file")
              echo "  ‚ùå Missing copyright header"
            else
              # Check if copyright year is current or recent (within 2 years)
              if ! grep -iE "(Copyright|¬©|\(c\)).*($((CURRENT_YEAR-1))|$CURRENT_YEAR)" "$file" >/dev/null 2>&1; then
                outdated_copyright+=("$file")
                echo "  ‚ö†Ô∏è  Potentially outdated copyright year"
              else
                echo "  ‚úÖ Copyright header looks good"
              fi
            fi
          fi
        done
        
        # Save results for issue creation
        echo "missing-count=${#missing_copyright[@]}" >> $GITHUB_OUTPUT
        echo "outdated-count=${#outdated_copyright[@]}" >> $GITHUB_OUTPUT
        
        if [ ${#missing_copyright[@]} -gt 0 ]; then
          echo "copyright-issues=true" >> $GITHUB_OUTPUT
          printf '%s\n' "${missing_copyright[@]}" > missing_copyright_files.txt
          echo ""
          echo "‚ùå Files missing copyright headers:"
          printf '  %s\n' "${missing_copyright[@]}"
        else
          echo "copyright-issues=false" >> $GITHUB_OUTPUT
        fi
        
        if [ ${#outdated_copyright[@]} -gt 0 ]; then
          echo "outdated-copyright=true" >> $GITHUB_OUTPUT
          printf '%s\n' "${outdated_copyright[@]}" > outdated_copyright_files.txt
          echo ""
          echo "‚ö†Ô∏è  Files with potentially outdated copyright:"
          printf '  %s\n' "${outdated_copyright[@]}"
        else
          echo "outdated-copyright=false" >> $GITHUB_OUTPUT
        fi
        
        # Overall status
        if [ ${#missing_copyright[@]} -gt 0 ] || [ ${#outdated_copyright[@]} -gt 0 ]; then
          echo "overall-status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "overall-status=passed" >> $GITHUB_OUTPUT
          echo ""
          echo "‚úÖ All source files have proper copyright headers!"
        fi

    - name: Check for potential copyright violations
      id: copyright-scan
      run: |
        echo "üîç Scanning for potential copyright violations..."
        
        # Use licensecheck to scan for potential issues
        violations_found=false
        
        # Check source files for suspicious patterns
        suspicious_files=()
        
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null || true); do
          # Look for patterns that might indicate copied code
          if grep -l "TODO.*copyright\|FIXME.*copyright\|borrowed from\|copied from\|adapted from" "$file" 2>/dev/null; then
            suspicious_files+=("$file")
            violations_found=true
          fi
        done
        
        # Check for large blocks of commented code (might be copied)
        echo "Checking for large commented code blocks..."
        for file in $(find src tests -name "*.cpp" -o -name "*.hpp" 2>/dev/null || true); do
          # Count consecutive comment lines
          comment_block_size=$(awk '
            /^[[:space:]]*\/\// { 
              count++; 
              if (count > max) max = count 
            } 
            !/^[[:space:]]*\/\// { 
              count = 0 
            } 
            END { 
              print max + 0 
            }' "$file")
          
          if [ "$comment_block_size" -gt 50 ]; then
            echo "  ‚ö†Ô∏è  Large commented block ($comment_block_size lines) in $file"
            suspicious_files+=("$file")
          fi
        done
        
        if [ "$violations_found" = true ] || [ ${#suspicious_files[@]} -gt 0 ]; then
          echo "violations-found=true" >> $GITHUB_OUTPUT
          printf '%s\n' "${suspicious_files[@]}" > suspicious_copyright_files.txt
          echo ""
          echo "‚ö†Ô∏è  Potential copyright concerns found in:"
          printf '  %s\n' "${suspicious_files[@]}"
        else
          echo "violations-found=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No obvious copyright violations detected"
        fi

    - name: Generate copyright report
      run: |
        echo "üìä Generating copyright compliance report..."
        
        cat > copyright_report.md << EOF
        # Copyright Compliance Report
        
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## Summary
        
        - **Files Missing Copyright:** ${{ steps.copyright-headers.outputs.missing-count }}
        - **Files with Outdated Copyright:** ${{ steps.copyright-headers.outputs.outdated-count }}
        - **Potential Violations:** ${{ steps.copyright-scan.outputs.violations-found }}
        
        ## Expected Copyright Format
        
        All source files should include a copyright header similar to:
        
        \`\`\`cpp
        /*
         * Copyright (c) $(date +%Y) [Your Name/Organization]
         * SPDX-License-Identifier: MIT
         */
        \`\`\`
        
        Or for single-line:
        
        \`\`\`cpp
        // Copyright (c) $(date +%Y) [Your Name/Organization]
        // SPDX-License-Identifier: MIT
        \`\`\`
        
        ## Recommendations
        
        1. Add copyright headers to all source files
        2. Update copyright years annually
        3. Use SPDX license identifiers for clarity
        4. Review any flagged files for potential copyright issues
        
        EOF

    - name: Create issue for copyright violations
      if: failure() && (steps.copyright-headers.outputs.copyright-issues == 'true' || steps.copyright-scan.outputs.violations-found == 'true')
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `‚öñÔ∏è Copyright Compliance Issues Detected - ${new Date().toISOString().split('T')[0]}`;
          const missingCount = '${{ steps.copyright-headers.outputs.missing-count }}' || '0';
          const outdatedCount = '${{ steps.copyright-headers.outputs.outdated-count }}' || '0';
          const violationsFound = '${{ steps.copyright-scan.outputs.violations-found }}' === 'true';
          
          const currentYear = new Date().getFullYear();
          
          let issues = [];
          if (missingCount > 0) {
            issues.push(`- ${missingCount} source files missing copyright headers`);
          }
          if (outdatedCount > 0) {
            issues.push(`- ${outdatedCount} source files with potentially outdated copyright years`);
          }
          if (violationsFound) {
            issues.push(`- Potential copyright violations or concerns detected`);
          }
          
          const body = `
          ## Copyright Compliance Alert ‚öñÔ∏è¬©Ô∏è
          
          The automated copyright compliance check has identified issues that require attention.
          
          **Issues Found:**
          ${issues.map(issue => issue).join('\n')}
          
          **Repository Details:**
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Workflow Run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **Required Actions:**
          
          ${missingCount > 0 ? `
          ### üìù Missing Copyright Headers
          Add copyright headers to source files. Use this template:
          
          \`\`\`cpp
          /*
           * Copyright (c) ${currentYear} [Your Name/Organization]
           * SPDX-License-Identifier: MIT
           */
          \`\`\`
          
          **Quick Fix Command:**
          \`\`\`bash
          # Add copyright header to files (update [Your Name] and license as needed)
          for file in \$(cat missing_copyright_files.txt); do
            echo "/*" > temp_header.txt
            echo " * Copyright (c) ${currentYear} [Your Name]" >> temp_header.txt
            echo " * SPDX-License-Identifier: MIT" >> temp_header.txt
            echo " */" >> temp_header.txt
            echo "" >> temp_header.txt
            cat "\$file" >> temp_header.txt
            mv temp_header.txt "\$file"
          done
          \`\`\`
          ` : ''}
          
          ${outdatedCount > 0 ? `
          ### üìÖ Outdated Copyright Years
          Update copyright years to ${currentYear} or use a range (e.g., 2020-${currentYear}).
          
          **Update Command:**
          \`\`\`bash
          # Update copyright years (adjust pattern as needed)
          sed -i 's/Copyright (c) [0-9]\\{4\\}/Copyright (c) ${currentYear}/g' \$(cat outdated_copyright_files.txt)
          \`\`\`
          ` : ''}
          
          ${violationsFound ? `
          ### ‚ö†Ô∏è Potential Copyright Violations
          Review flagged files for:
          - Large blocks of commented code
          - TODO/FIXME comments about copyright
          - References to "borrowed" or "copied" code
          - Ensure all code is original or properly attributed
          ` : ''}
          
          **Best Practices:**
          1. üìã Use consistent copyright format across all files
          2. üìÖ Update copyright years annually
          3. üè∑Ô∏è Include SPDX license identifiers
          4. üìñ Document any third-party code with proper attribution
          5. ‚úÖ Review all code additions for copyright compliance
          
          **Legal Priority:** High üî¥
          
          ---
          *This issue was automatically created by the copyright compliance checker.*
          `;
          
          // Check if a similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['copyright', 'legal', 'compliance'],
            state: 'open'
          });
          
          const recentIssue = existingIssues.data.find(issue => 
            issue.title.includes('Copyright Compliance Issues') && 
            new Date(issue.created_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Within 7 days
          );
          
          if (!recentIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['copyright', 'legal', 'compliance', 'automated', 'high-priority']
            });
            console.log('Created copyright compliance issue');
          } else {
            console.log('Recent copyright compliance issue already exists, skipping creation');
          }

    - name: Upload copyright compliance artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: copyright-compliance-report-${{ github.sha }}
        path: |
          copyright_report.md
          missing_copyright_files.txt
          outdated_copyright_files.txt
          suspicious_copyright_files.txt
        retention-days: 30

  # Job 5: Documentation quality check (renamed from Job 4)
  documentation-check:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04

    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y \
          build-essential \
          cmake \
          git \
          pkg-config \
          libudev-dev \
          libevdev-dev \
          qt6-base-dev \
          qt6-bluetooth-dev \
          doxygen \
          graphviz \
          curl \
          ca-certificates

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure CMake for documentation
      run: |
        mkdir build
        cd build
        cmake .. -DBUILD_DOCS=ON

    - name: Build documentation
      run: |
        cd build
        echo "üîç Building Doxygen documentation..."
        make docs

    - name: Check documentation completeness
      run: |
        echo "üîç Checking documentation quality..."
        
        # Check if documentation was generated
        if [ ! -d "build/doc/api" ]; then
          echo "‚ùå Documentation directory not found!"
          exit 1
        fi
        
        # Check for Doxygen warnings
        if [ -f "build/doxygen_warnings.log" ]; then
          if [ -s "build/doxygen_warnings.log" ]; then
            echo "‚ö†Ô∏è  Doxygen warnings found:"
            cat build/doxygen_warnings.log
            echo ""
            echo "Please fix the documentation warnings above."
            exit 1
          fi
        fi
        
        # Check for undocumented public APIs
        echo "Checking for undocumented public APIs..."
        
        # Look for public functions/classes without documentation
        PUBLIC_APIS_UNDOCUMENTED=false
        
        for header in $(find src -name "*.hpp" 2>/dev/null || true); do
          echo "Checking: $header"
          
          # Simple check for public methods without /** comments
          if grep -n "public:" "$header" >/dev/null 2>&1; then
            # Extract public section
            awk '/public:/{flag=1} /private:|protected:/{flag=0} flag' "$header" > temp_public.txt
            
            # Check for functions without documentation
            if grep -E "^\s*(virtual\s+)?[a-zA-Z_][a-zA-Z0-9_]*\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\(" temp_public.txt >/dev/null 2>&1; then
              echo "  Found public methods - checking documentation..."
              # This is a simplified check - in practice, you'd want more sophisticated parsing
            fi
            
            rm -f temp_public.txt
          fi
        done
        
        echo "‚úÖ Documentation build completed successfully!"
        
        # Check documentation file sizes
        if [ -d "build/doc/api/html" ]; then
          HTML_COUNT=$(find build/doc/api/html -name "*.html" | wc -l)
          echo "üìä Generated $HTML_COUNT HTML documentation pages"
          
          if [ "$HTML_COUNT" -eq 0 ]; then
            echo "‚ö†Ô∏è  No HTML documentation pages generated - check Doxygen configuration"
            exit 1
          fi
        fi

  link-checker:
    name: Documentation Link Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install markdown-link-check
      run: |
        npm install -g markdown-link-check

    - name: Check links in documentation
      run: |
        echo "üîç Checking links in Markdown files..."
        
        # Create config file for markdown-link-check
        cat > .markdown-link-check.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://github.com/your-username"
            }
          ],
          "httpHeaders": [
            {
              "urls": ["https://github.com"],
              "headers": {
                "User-Agent": "Mozilla/5.0 (compatible; Linkcheck)"
              }
            }
          ],
          "timeout": "10s",
          "retryOn429": true,
          "retryCount": 3,
          "fallbackRetryDelay": "30s"
        }
        EOF
        
        # Find all markdown files
        MD_FILES=$(find . -name "*.md" -not -path "./build/*" -not -path "./.git/*" 2>/dev/null || true)
        
        if [ -z "$MD_FILES" ]; then
          echo "‚ÑπÔ∏è  No Markdown files found to check"
          exit 0
        fi
        
        LINK_ERRORS=false
        
        for md_file in $MD_FILES; do
          echo "Checking links in: $md_file"
          
          if ! markdown-link-check "$md_file" --config .markdown-link-check.json; then
            echo "‚ùå Link check failed for $md_file"
            LINK_ERRORS=true
          else
            echo "‚úÖ All links valid in $md_file"
          fi
        done
        
        if [ "$LINK_ERRORS" = true ]; then
          echo ""
          echo "‚ùå Link validation failed!"
          echo "Please fix the broken links identified above."
          exit 1
        else
          echo ""
          echo "‚úÖ All documentation links are valid!"
        fi

  quality-summary:
    name: Quality Summary
    needs: [code-formatting, markdown-linting, mermaid-validation, copyright-check, documentation-check, link-checker]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Quality Gate Summary
      run: |
        echo "üìä Quality Assurance Summary"
        echo "=========================="
        
        # Check job results
        CODE_FORMAT="${{ needs.code-formatting.result }}"
        MARKDOWN_LINT="${{ needs.markdown-linting.result }}"
        MERMAID_CHECK="${{ needs.mermaid-validation.result }}"
        COPYRIGHT_CHECK="${{ needs.copyright-check.result }}"
        DOCS_CHECK="${{ needs.documentation-check.result }}"
        LINK_CHECK="${{ needs.link-checker.result }}"
        
        echo "üé® Code Formatting: $CODE_FORMAT"
        echo "üìù Markdown Linting: $MARKDOWN_LINT"
        echo "üìä Mermaid Validation: $MERMAID_CHECK"
        echo "‚öñÔ∏è  Copyright Compliance: $COPYRIGHT_CHECK"
        echo "üìö Documentation: $DOCS_CHECK"
        echo "üîó Link Checking: $LINK_CHECK"
        echo ""
        
        # Determine overall status
        if [ "$CODE_FORMAT" = "success" ] && \
           [ "$MARKDOWN_LINT" = "success" ] && \
           [ "$MERMAID_CHECK" = "success" ] && \
           [ "$COPYRIGHT_CHECK" = "success" ] && \
           [ "$DOCS_CHECK" = "success" ] && \
           [ "$LINK_CHECK" = "success" ]; then
          echo "‚úÖ All quality checks passed!"
          echo "üöÄ Code is ready for merge!"
        else
          echo "‚ùå Some quality checks failed!"
          echo ""
          echo "Failed checks require attention:"
          [ "$CODE_FORMAT" != "success" ] && echo "  - üé® Code formatting needs fixing"
          [ "$MARKDOWN_LINT" != "success" ] && echo "  - üìù Markdown linting issues found"
          [ "$MERMAID_CHECK" != "success" ] && echo "  - üìä Mermaid diagram issues found"
          [ "$COPYRIGHT_CHECK" != "success" ] && echo "  - ‚öñÔ∏è  Copyright compliance issues found"
          [ "$DOCS_CHECK" != "success" ] && echo "  - üìö Documentation issues found"
          [ "$LINK_CHECK" != "success" ] && echo "  - üîó Link validation failed"
          echo ""
          echo "Please review the failed checks above before merging."
          exit 1
        fi
